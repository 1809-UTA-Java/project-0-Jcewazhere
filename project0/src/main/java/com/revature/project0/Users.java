package com.revature.project0;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

/**
 * Users Value Object.
 * This class is value object representing database table users
 * This class is intented to be used together with associated Dao object.
 */

/**
 * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
 * The usage of generated code is restricted to OpenSource software projects
 * only. DaoGen is available in http://titaniclinux.net/daogen/ It has been
 * programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
 *
 * DaoGen license: The following DaoGen generated source code is licensed under
 * the terms of GNU GPL license. The full text for license is available in GNU
 * project's pages: http://www.gnu.org/copyleft/gpl.html
 *
 * If you wish to use the DaoGen generator to produce code for closed-source
 * commercial applications, you must pay the lisence fee. The price is 5 USD or
 * 5 Eur for each database table, you are generating code for. (That includes
 * unlimited amount of iterations with all supported languages for each database
 * table you are paying for.) Send mail to "Tuomo.Lukka@iki.fi" for more
 * information. Thank you!
 */

public class Users implements Cloneable, Serializable {

	/**
	 * Persistent Instance variables. This data is directly mapped to the columns of
	 * database table.
	 */
	private int UserID;
	private String FName;
	private String LName;
	private String isActive;
	private int zip;
	private String DoB;
	private String Username;
	private String Password;

	/**
	 * Constructors. DaoGen generates two constructors by default. The first one
	 * takes no arguments and provides the most simple way to create object
	 * instance. The another one takes one argument, which is the primary key of the
	 * corresponding table.
	 */

	public Users() {

	}

	public Users(int UserIDIn) {

		this.UserID = UserIDIn;

	}

	/**
	 * Get- and Set-methods for persistent variables. The default behaviour does not
	 * make any checks against malformed data, so these might require some manual
	 * additions.
	 */

	public int getUserID() {
		return this.UserID;
	}

	public void setUserID(int UserIDIn) {
		this.UserID = UserIDIn;
	}

	public String getFName() {
		return this.FName;
	}

	public void setFName(String FNameIn) {
		this.FName = FNameIn;
	}

	public String getLName() {
		return this.LName;
	}

	public void setLName(String LNameIn) {
		this.LName = LNameIn;
	}

	public String getIsActive() {
		return this.isActive;
	}

	public void setIsActive(String isActiveIn) {
		this.isActive = isActiveIn;
	}

	public int getZip() {
		return this.zip;
	}

	public void setZip(int zipIn) {
		this.zip = zipIn;
	}

	public String getDoB() {
		return this.DoB;
	}

	public void setDoB(String DoBIn) {
		this.DoB = DoBIn;
	}

	public String getUsername() {
		return this.Username;
	}

	public void setUsername(String UsernameIn) {
		this.Username = UsernameIn;
	}

	public String getPassword() {
		return this.Password;
	}

	public void setPassword(String PasswordIn) {
		this.Password = PasswordIn;
	}

	/**
	 * setAll allows to set all persistent variables in one method call. This is
	 * useful, when all data is available and it is needed to set the initial state
	 * of this object. Note that this method will directly modify instance variales,
	 * without going trough the individual set-methods.
	 */

	public void setAll(int UserIDIn, String FNameIn, String LNameIn, String isActiveIn, int zipIn, String DoBIn,
			String UsernameIn, String PasswordIn) {
		this.UserID = UserIDIn;
		this.FName = FNameIn;
		this.LName = LNameIn;
		this.isActive = isActiveIn;
		this.zip = zipIn;
		this.DoB = DoBIn;
		this.Username = UsernameIn;
		this.Password = PasswordIn;
	}

	/**
	 * hasEqualMapping-method will compare two Users instances and return true if
	 * they contain same values in all persistent instance variables. If
	 * hasEqualMapping returns true, it does not mean the objects are the same
	 * instance. However it does mean that in that moment, they are mapped to the
	 * same row in database.
	 */
	public boolean hasEqualMapping(Users valueObject) {

		if (valueObject.getUserID() != this.UserID) {
			return (false);
		}
		if (this.FName == null) {
			if (valueObject.getFName() != null)
				return (false);
		} else if (!this.FName.equals(valueObject.getFName())) {
			return (false);
		}
		if (this.LName == null) {
			if (valueObject.getLName() != null)
				return (false);
		} else if (!this.LName.equals(valueObject.getLName())) {
			return (false);
		}
		if (this.isActive == null) {
			if (valueObject.getIsActive() != null)
				return (false);
		} else if (!this.isActive.equals(valueObject.getIsActive())) {
			return (false);
		}
		if (valueObject.getZip() != this.zip) {
			return (false);
		}
		if (this.DoB == null) {
			if (valueObject.getDoB() != null)
				return (false);
		} else if (!this.DoB.equals(valueObject.getDoB())) {
			return (false);
		}
		if (this.Username == null) {
			if (valueObject.getUsername() != null)
				return (false);
		} else if (!this.Username.equals(valueObject.getUsername())) {
			return (false);
		}
		if (this.Password == null) {
			if (valueObject.getPassword() != null)
				return (false);
		} else if (!this.Password.equals(valueObject.getPassword())) {
			return (false);
		}

		return true;
	}

	/**
	 * toString will return String object representing the state of this
	 * valueObject. This is useful during application development, and possibly when
	 * application is writing object states in textlog.
	 */
	public String toString() {
		StringBuffer out = new StringBuffer(this.getDaogenVersion());
		out.append("\nclass Users, mapping to table users\n");
		out.append("Persistent attributes: \n");
		out.append("UserID = " + this.UserID + "\n");
		out.append("FName = " + this.FName + "\n");
		out.append("LName = " + this.LName + "\n");
		out.append("isActive = " + this.isActive + "\n");
		out.append("zip = " + this.zip + "\n");
		out.append("DoB = " + this.DoB + "\n");
		out.append("Username = " + this.Username + "\n");
		out.append("Password = " + this.Password + "\n");
		return out.toString();
	}

	/**
	 * Clone will return identical deep copy of this valueObject. Note, that this
	 * method is different than the clone() which is defined in java.lang.Object.
	 * Here, the retuned cloned object will also have all its attributes cloned.
	 */
	public Object clone() {
		Users cloned = new Users();

		cloned.setUserID(this.UserID);
		if (this.FName != null)
			cloned.setFName(new String(this.FName));
		if (this.LName != null)
			cloned.setLName(new String(this.LName));
		if (this.isActive != null)
			cloned.setIsActive(new String(this.isActive));
		cloned.setZip(this.zip);
		if (this.DoB != null)
			cloned.setDoB(new String(this.DoB));
		if (this.Username != null)
			cloned.setUsername(new String(this.Username));
		if (this.Password != null)
			cloned.setPassword(new String(this.Password));
		return cloned;
	}

	/**
	 * getDaogenVersion will return information about generator which created these
	 * sources.
	 */
	public String getDaogenVersion() {
		return "DaoGen version 2.4.1";
	}

}